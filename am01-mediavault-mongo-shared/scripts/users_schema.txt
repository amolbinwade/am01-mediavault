use mediavault;

db.createCollection("users", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["_id", "firstName", "lastName", "email", "status", "createdAt", "createdBy"],
      properties: {
        _id:       { bsonType: "objectId", description: "Primary key (auto-generated if not provided)" },

        firstName: { bsonType: "string", description: "User's first name" },
        lastName:  { bsonType: "string", description: "User's last name" },
        email:     { bsonType: "string", pattern: "^.+@.+$", description: "User email address" },
        status:    { enum: ["ACTIVE", "INACTIVE", "DELETED"], description: "Account status" },

        createdAt: { bsonType: "date", description: "Creation timestamp" },
        createdBy: { bsonType: "string", description: "Creator identifier (system/user)" },
        updatedAt: { bsonType: "date", description: "Last update timestamp" },
        updatedBy: { bsonType: "string", description: "Last updater identifier" },

        version:   { bsonType: "int", description: "Optimistic locking version number" }
      }
    }
  }
});

use mediavault;

// Unique index on email (ensures no duplicate accounts)
db.users.createIndex(
  { email: 1 },
  { unique: true, name: "idx_email_unique" }
);

// Optional: index on status (helps when filtering active users)
db.users.createIndex(
  { status: 1 },
  { name: "idx_status" }
);


# insert sample data

db.users.insertOne({
  firstName: "Alice",
  lastName: "Johnson",
  email: "alice.johnson@example.com",
  status: "ACTIVE",

  createdAt: new Date(),
  createdBy: "system-init",
  updatedAt: new Date(),
  updatedBy: "system-init",

  version: 1
});